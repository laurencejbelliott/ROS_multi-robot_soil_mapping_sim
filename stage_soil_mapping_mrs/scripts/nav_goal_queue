#!/usr/bin/env python
import rospy
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from std_msgs.msg import String

# TODO: add
#  - Removing goals
#  - Insertion heuristic
rospy.init_node('nav_goal_queue')
namespace = rospy.get_namespace()
print(namespace)
client = actionlib.SimpleActionClient(namespace+'move_base', MoveBaseAction)
client.wait_for_server()

goal_queue = []
goal_queue_pub = rospy.Publisher(namespace+'nav_goal_queue/goal_queue', String, queue_size=1)


def queue_nav_goal_callback(data):
    rospy.loginfo("New goal received: " + str(data.target_pose.pose.position.x) + "," +
                  str(data.target_pose.pose.position.y))

    goal_queue.append(data)

    # Human readable goal queue
    goal_queue_hr = []
    for goal in goal_queue:
        goal_queue_hr.append([goal.target_pose.pose.position.x, goal.target_pose.pose.position.y])

    if len(goal_queue) > 0:
        goal_queue_pub.publish(str(goal_queue_hr))
        rospy.loginfo("\nNav goal queue:")
        for g in range(len(goal_queue)):
            rospy.loginfo("\nGoal at queue position " + str(g) + ":\n" + str(goal_queue[g].target_pose.pose.position))


def queue_nav_goal_listener():
    rospy.Subscriber(namespace+'nav_goal_queue/add_goal', MoveBaseGoal, queue_nav_goal_callback)

    while not rospy.is_shutdown():
        if len(goal_queue) > 0:
            goal = goal_queue.pop(0)
            client.send_goal(goal)
            rospy.loginfo("Executing goal: " + str(goal.target_pose.pose.position))
            client.wait_for_result()

    rospy.spin()


if __name__ == '__main__':
    queue_nav_goal_listener()
